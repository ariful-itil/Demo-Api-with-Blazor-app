// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Rms.Models;

public partial class Entity : DbContext
{
    public Entity()
    {
    }

    public Entity(DbContextOptions<Entity> options)
        : base(options)
    {
    }

    public virtual DbSet<ApplicantInfo> ApplicantInfo { get; set; }

    public virtual DbSet<ApplicantValidPhotoInfo> ApplicantValidPhotoInfo { get; set; }

    public virtual DbSet<ApplicationRegistry> ApplicationRegistry { get; set; }

    public virtual DbSet<Beneficiary> Beneficiary { get; set; }

    public virtual DbSet<BranchInfo> BranchInfo { get; set; }

    public virtual DbSet<BranchRegistry> BranchRegistry { get; set; }

    public virtual DbSet<CommonCode> CommonCode { get; set; }

    public virtual DbSet<Computers> Computers { get; set; }

    public virtual DbSet<ExchangeRateInfo> ExchangeRateInfo { get; set; }

    public virtual DbSet<FeesInfo> FeesInfo { get; set; }

    public virtual DbSet<Remittance> Remittance { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=RMS_MBL_UK;User ID=sqladmin;Password=B@ngl@d3sh;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApplicantInfo>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("ApplicantInfo_Insert"));

            entity.Property(e => e.AGEXIDNO).HasDefaultValueSql("([dbo].[getrandom](rand()))");
            entity.Property(e => e.ApplicantAccNo).HasDefaultValue("");
            entity.Property(e => e.ApplicantNote).HasDefaultValue("");
            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.DOBDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Email).HasDefaultValue("");
            entity.Property(e => e.ExpiryDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.FundingSource).HasDefaultValue("");
            entity.Property(e => e.Gender).IsFixedLength();
            entity.Property(e => e.LGA).HasDefaultValue("");
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Mobile).HasDefaultValue("");
            entity.Property(e => e.Nationality).HasDefaultValue("BD");
            entity.Property(e => e.OFACValidateReason).HasDefaultValue("Applicant/Remitter is complaince with OFAC/OSFI");
            entity.Property(e => e.Occupation).HasDefaultValue("");
            entity.Property(e => e.PassportNo).HasDefaultValue("");
            entity.Property(e => e.PoliticalExposePerson).HasDefaultValue("Non-PEPs");
            entity.Property(e => e.Region).HasDefaultValue("");
            entity.Property(e => e.SocialSecurityId).HasDefaultValue("");
            entity.Property(e => e.State).HasDefaultValue("");
            entity.Property(e => e.Telephone).HasDefaultValue("");
            entity.Property(e => e.UserId).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ZipCode).HasDefaultValue("");

            entity.HasOne(d => d.BranchCodeNavigation).WithMany(p => p.ApplicantInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicantInfo_BranchInfo");
        });

        modelBuilder.Entity<ApplicantValidPhotoInfo>(entity =>
        {
            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UserID).HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.BranchCodeNavigation).WithMany(p => p.ApplicantValidPhotoInfo).HasConstraintName("FK_ApplicantValidPhotoInfo_BranchInfo");

            entity.HasOne(d => d.ApplicantInfo).WithMany(p => p.ApplicantValidPhotoInfo)
                .HasPrincipalKey(p => new { p.BranchCode, p.AGEXIDNO })
                .HasForeignKey(d => new { d.BranchCode, d.AGEXIDNO })
                .HasConstraintName("FK_ApplicantValidPhotoInfo_ApplicantInfo");
        });

        modelBuilder.Entity<ApplicationRegistry>(entity =>
        {
            entity.Property(e => e.BankCode).IsFixedLength();

            entity.HasOne(d => d.BankCodeNavigation).WithMany(p => p.ApplicationRegistry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationRegistry_BranchInfo");
        });

        modelBuilder.Entity<Beneficiary>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("Beneficiary_Insert"));

            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.BenDistrict).HasDefaultValue("");
            entity.Property(e => e.BeneficiaryCategory).HasDefaultValueSql("((0))");
            entity.Property(e => e.BeneficiaryType).IsFixedLength();
            entity.Property(e => e.DrawingBranchCode).IsFixedLength();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.UserId).HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.BranchCodeNavigation).WithMany(p => p.BeneficiaryBranchCodeNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Beneficiary_BranchInfo");

            entity.HasOne(d => d.DrawingBranchCodeNavigation).WithMany(p => p.BeneficiaryDrawingBranchCodeNavigation).HasConstraintName("FK_Beneficiary_DrawingBranch");
        });

        modelBuilder.Entity<BranchInfo>(entity =>
        {
            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.AccountNoFC).HasDefaultValue("");
            entity.Property(e => e.AccountNoLC).HasDefaultValue("");
            entity.Property(e => e.BranchLevel).IsFixedLength();
            entity.Property(e => e.BranchType)
                .HasDefaultValue("0")
                .IsFixedLength();
            entity.Property(e => e.CountryCode).HasDefaultValue("BD");
            entity.Property(e => e.CurrencyCode).HasDefaultValue("BDT");
            entity.Property(e => e.FifthLevel).IsFixedLength();
            entity.Property(e => e.FirstLevel).IsFixedLength();
            entity.Property(e => e.FourthLevel).IsFixedLength();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.NativeBranchCode).IsFixedLength();
            entity.Property(e => e.OwnBranchCode).IsFixedLength();
            entity.Property(e => e.SecondLevel).IsFixedLength();
            entity.Property(e => e.ThirdLevel).IsFixedLength();
            entity.Property(e => e.UserId).HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.ZoneCode)
                .HasDefaultValue("0000")
                .IsFixedLength();
        });

        modelBuilder.Entity<BranchRegistry>(entity =>
        {
            entity.Property(e => e.BranchCode).IsFixedLength();
        });

        modelBuilder.Entity<CommonCode>(entity =>
        {
            entity.Property(e => e.BankCode)
                .HasDefaultValueSql("((11))")
                .IsFixedLength();
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<Computers>(entity =>
        {
            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.PhysicalAddress).IsFixedLength();
        });

        modelBuilder.Entity<ExchangeRateInfo>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.TransDate, e.CurrencyCode, e.SLNO, e.ExchangeRateType }).HasName("PK_ExchangeRate");

            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.ExchangeRateType).HasDefaultValue("R");
            entity.Property(e => e.BaseCurrencyCode).HasDefaultValue("BDT");
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UserId).HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.BranchCodeNavigation).WithMany(p => p.ExchangeRateInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExchangeRate_BranchInfo");
        });

        modelBuilder.Entity<FeesInfo>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.AccountType, e.TransType, e.SLNO }).HasName("PK_Fees");

            entity.Property(e => e.BranchCode).IsFixedLength();
            entity.Property(e => e.GLCode).IsFixedLength();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UserId).HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.BranchCodeNavigation).WithMany(p => p.FeesInfo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Fees_BranchInfo");
        });

        modelBuilder.Entity<Remittance>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("Remittance_Insert"));

            entity.Property(e => e.AGEXIDNO).HasDefaultValueSql("((0))");
            entity.Property(e => e.AdviceNo).IsFixedLength();
            entity.Property(e => e.CurrencyCode).HasDefaultValue("BDT");
            entity.Property(e => e.DateofPayment).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.DrawingCurrency).HasDefaultValue("BDT");
            entity.Property(e => e.FirstVerifiedDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.IssuingBranch).IsFixedLength();
            entity.Property(e => e.LastUpdate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Payment).HasDefaultValue(false);
            entity.Property(e => e.PaymentType).HasDefaultValue("01");
            entity.Property(e => e.PhotoIdNumber).HasDefaultValue("");
            entity.Property(e => e.PhotoIdType).HasDefaultValue("");
            entity.Property(e => e.Remarks).HasDefaultValue("");
            entity.Property(e => e.RemittanceNo).HasDefaultValueSql("([dbo].[getrandom](rand()))");
            entity.Property(e => e.RemittancePurpose).HasDefaultValue("");
            entity.Property(e => e.RespondingBranch).IsFixedLength();
            entity.Property(e => e.RiskScore).HasDefaultValue((byte)0);
            entity.Property(e => e.RuleViolation).HasDefaultValue("00");
            entity.Property(e => e.SecondVerifiedDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.Status).HasDefaultValue("00");
            entity.Property(e => e.StopPayment).HasDefaultValue(false);
            entity.Property(e => e.TestKey).HasDefaultValue("");
            entity.Property(e => e.ThirdPartyInfo).HasDefaultValue("");
            entity.Property(e => e.TransDate).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.UserId).HasDefaultValueSql("(user_name())");

            entity.HasOne(d => d.IssuingBranchNavigation).WithMany(p => p.RemittanceIssuingBranchNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remittance_BranchInfo_Issue");

            entity.HasOne(d => d.RespondingBranchNavigation).WithMany(p => p.RemittanceRespondingBranchNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Remittance_BranchInfo_Respond");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}